'use client';

import React, { useState } from 'react';
import { PluginManifest } from '../lib/types';

interface PluginDevelopmentToolsProps {
  onPluginGenerated?: (manifest: PluginManifest) => void;
}

interface PluginTemplate {
  id: string;
  name: string;
  description: string;
  category: 'content' | 'ui' | 'analytics' | 'integration';
  template: Partial<PluginManifest>;
}

const PLUGIN_TEMPLATES: PluginTemplate[] = [
  {
    id: 'basic-content-processor',
    name: 'Content Processor',
    description: 'Process and transform markdown content',
    category: 'content',
    template: {
      processors: [{
        id: 'custom-processor',
        name: 'Custom Content Processor',
        type: 'markdown',
        process: async (content: string) => {
          // Custom processing logic here
          return content.replace(/TODO:/g, '✅ TODO:');
        }
      }]
    }
  },
  {
    id: 'sidebar-view',
    name: 'Sidebar Panel',
    description: 'Add a custom sidebar panel',
    category: 'ui',
    template: {
      views: [{
        id: 'custom-sidebar',
        name: 'Custom Sidebar',
        type: 'sidebar',
        component: null as any, // Will be generated
        icon: '🔧'
      }]
    }
  },
  {
    id: 'command-plugin',
    name: 'Command Plugin',
    description: 'Add custom commands to the editor',
    category: 'ui',
    template: {
      commands: [{
        id: 'custom-command',
        name: 'Custom Command',
        description: 'Execute custom functionality',
        keybinding: 'Ctrl+Shift+X',
        callback: async () => {
          console.log('Custom command executed!');
        }
      }]
    }
  },
  {
    id: 'analytics-tracker',
    name: 'Analytics Tracker',
    description: 'Track user interactions and events',
    category: 'analytics',
    template: {}
  }
];

export function PluginDevelopmentTools({ onPluginGenerated }: PluginDevelopmentToolsProps) {
  const [selectedTemplate, setSelectedTemplate] = useState<PluginTemplate | null>(null);
  const [pluginInfo, setPluginInfo] = useState({
    id: '',
    name: '',
    description: '',
    author: '',
    version: '1.0.0'
  });
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [activeTab, setActiveTab] = useState<'templates' | 'validator' | 'docs'>('templates');
  const [validationResult, setValidationResult] = useState<{ valid: boolean; errors: string[]; warnings: string[] } | null>(null);

  const handleTemplateSelect = (template: PluginTemplate) => {
    setSelectedTemplate(template);
    setPluginInfo(prev => ({
      ...prev,
      id: template.id,
      name: template.name,
      description: template.description
    }));
  };

  const generatePlugin = () => {
    if (!selectedTemplate) return;

    const manifest: PluginManifest = {
      id: pluginInfo.id,
      name: pluginInfo.name,
      version: pluginInfo.version,
      description: pluginInfo.description,
      author: pluginInfo.author,
      main: 'index.js',
      ...selectedTemplate.template,
      onLoad: async () => {
        console.log(`${pluginInfo.name} v${pluginInfo.version} loaded`);
      },
      onUnload: async () => {
        console.log(`${pluginInfo.name} unloaded`);
      }
    };

    const code = generatePluginCode(manifest);
    setGeneratedCode(code);
    
    if (onPluginGenerated) {
      onPluginGenerated(manifest);
    }
  };

  const generatePluginCode = (manifest: PluginManifest): string => {
    return `// ${manifest.name} Plugin
// Generated by MarkItUp Plugin Development Tools
// Version: ${manifest.version}
// Author: ${manifest.author}

export const pluginManifest = ${JSON.stringify(manifest, null, 2)};

// Plugin implementation
class ${manifest.name.replace(/[^a-zA-Z0-9]/g, '')}Plugin {
  constructor(api) {
    this.api = api;
    this.initialized = false;
  }

  async onLoad() {
    console.log('${manifest.name} plugin loaded');
    this.initialized = true;
    
    // Register event listeners
    this.api.events.on('note-created', this.handleNoteCreated.bind(this));
    this.api.events.on('note-updated', this.handleNoteUpdated.bind(this));
  }

  async onUnload() {
    console.log('${manifest.name} plugin unloaded');
    this.initialized = false;
    
    // Clean up event listeners
    this.api.events.off('note-created', this.handleNoteCreated.bind(this));
    this.api.events.off('note-updated', this.handleNoteUpdated.bind(this));
  }

  handleNoteCreated(note) {
    // Handle note creation
    console.log('Note created:', note.name);
  }

  handleNoteUpdated(note) {
    // Handle note updates
    console.log('Note updated:', note.name);
  }

  // Add your custom methods here
}

export default ${manifest.name.replace(/[^a-zA-Z0-9]/g, '')}Plugin;`;
  };

  const validatePlugin = () => {
    const errors: string[] = [];
    const warnings: string[] = [];

    if (!pluginInfo.id) errors.push('Plugin ID is required');
    if (!pluginInfo.name) errors.push('Plugin name is required');
    if (!pluginInfo.author) errors.push('Plugin author is required');
    if (!pluginInfo.version) errors.push('Plugin version is required');

    if (pluginInfo.version && !/^\d+\.\d+\.\d+$/.test(pluginInfo.version)) {
      warnings.push('Version should follow semantic versioning (x.y.z)');
    }

    if (pluginInfo.id && !/^[a-z0-9-]+$/.test(pluginInfo.id)) {
      warnings.push('Plugin ID should only contain lowercase letters, numbers, and hyphens');
    }

    if (pluginInfo.description && pluginInfo.description.length > 200) {
      warnings.push('Description should be under 200 characters');
    }

    setValidationResult({
      valid: errors.length === 0,
      errors,
      warnings
    });
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Plugin Development Tools
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Create, validate, and test plugins for MarkItUp
        </p>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200 dark:border-gray-700 mb-6">
        <nav className="flex space-x-8">
          {[
            { id: 'templates', label: 'Templates', icon: '📄' },
            { id: 'validator', label: 'Validator', icon: '✅' },
            { id: 'docs', label: 'Documentation', icon: '📚' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Templates Tab */}
      {activeTab === 'templates' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Template Selection */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">
              Choose a Template
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {PLUGIN_TEMPLATES.map(template => (
                <button
                  key={template.id}
                  onClick={() => handleTemplateSelect(template)}
                  className={`p-4 text-left border rounded-lg transition-colors ${
                    selectedTemplate?.id === template.id
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <h4 className="font-medium text-gray-900 dark:text-white mb-1">
                    {template.name}
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                    {template.description}
                  </p>
                  <span className="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">
                    {template.category}
                  </span>
                </button>
              ))}
            </div>

            {/* Plugin Information Form */}
            {selectedTemplate && (
              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                <h4 className="font-medium text-gray-900 dark:text-white mb-3">
                  Plugin Information
                </h4>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Plugin ID
                    </label>
                    <input
                      type="text"
                      value={pluginInfo.id}
                      onChange={e => setPluginInfo(prev => ({ ...prev, id: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      placeholder="my-awesome-plugin"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Plugin Name
                    </label>
                    <input
                      type="text"
                      value={pluginInfo.name}
                      onChange={e => setPluginInfo(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      placeholder="My Awesome Plugin"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Description
                    </label>
                    <textarea
                      value={pluginInfo.description}
                      onChange={e => setPluginInfo(prev => ({ ...prev, description: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      rows={3}
                      placeholder="What does your plugin do?"
                    />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Author
                      </label>
                      <input
                        type="text"
                        value={pluginInfo.author}
                        onChange={e => setPluginInfo(prev => ({ ...prev, author: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="Your Name"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Version
                      </label>
                      <input
                        type="text"
                        value={pluginInfo.version}
                        onChange={e => setPluginInfo(prev => ({ ...prev, version: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        placeholder="1.0.0"
                      />
                    </div>
                  </div>
                </div>
                
                <button
                  onClick={generatePlugin}
                  className="mt-4 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                >
                  Generate Plugin
                </button>
              </div>
            )}
          </div>

          {/* Generated Code */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              Generated Code
            </h3>
            
            {generatedCode ? (
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-auto max-h-96">
                <pre>{generatedCode}</pre>
              </div>
            ) : (
              <div className="bg-gray-100 dark:bg-gray-800 p-8 rounded-lg text-center">
                <p className="text-gray-500 dark:text-gray-400">
                  Select a template and fill in the plugin information to generate code
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Validator Tab */}
      {activeTab === 'validator' && (
        <div className="max-w-2xl">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
            Plugin Validator
          </h3>
          
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Plugin ID
                </label>
                <input
                  type="text"
                  value={pluginInfo.id}
                  onChange={e => setPluginInfo(prev => ({ ...prev, id: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Plugin Name
                </label>
                <input
                  type="text"
                  value={pluginInfo.name}
                  onChange={e => setPluginInfo(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <button
                onClick={validatePlugin}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
              >
                Validate Plugin
              </button>
            </div>
            
            {validationResult && (
              <div className="mt-6 p-4 rounded-lg border">
                <h4 className="font-medium mb-2">Validation Results</h4>
                
                {validationResult.valid ? (
                  <div className="text-green-600 dark:text-green-400">
                    ✅ Plugin is valid!
                  </div>
                ) : (
                  <div className="text-red-600 dark:text-red-400">
                    ❌ Plugin has errors
                  </div>
                )}
                
                {validationResult.errors.length > 0 && (
                  <div className="mt-3">
                    <h5 className="font-medium text-red-600 dark:text-red-400">Errors:</h5>
                    <ul className="list-disc list-inside text-sm text-red-600 dark:text-red-400">
                      {validationResult.errors.map((error, index) => (
                        <li key={index}>{error}</li>
                      ))}
                    </ul>
                  </div>
                )}
                
                {validationResult.warnings.length > 0 && (
                  <div className="mt-3">
                    <h5 className="font-medium text-yellow-600 dark:text-yellow-400">Warnings:</h5>
                    <ul className="list-disc list-inside text-sm text-yellow-600 dark:text-yellow-400">
                      {validationResult.warnings.map((warning, index) => (
                        <li key={index}>{warning}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Documentation Tab */}
      {activeTab === 'docs' && (
        <div className="prose dark:prose-invert max-w-none">
          <h3>Plugin Development Documentation</h3>
          
          <h4>Getting Started</h4>
          <p>
            MarkItUp plugins are JavaScript modules that extend the functionality of the editor.
            Each plugin must have a manifest that describes its capabilities and requirements.
          </p>
          
          <h4>Plugin Manifest</h4>
          <pre className="bg-gray-100 dark:bg-gray-800 p-4 rounded">
{`{
  "id": "my-plugin",
  "name": "My Plugin",
  "version": "1.0.0",
  "description": "A sample plugin",
  "author": "Plugin Developer",
  "main": "index.js",
  "permissions": [
    {
      "type": "file-system",
      "description": "Access files for processing"
    }
  ]
}`}
          </pre>
          
          <h4>Plugin API</h4>
          <p>
            Plugins have access to a comprehensive API that includes:
          </p>
          <ul>
            <li><strong>notes</strong> - Create, read, update, and delete notes</li>
            <li><strong>ui</strong> - Show notifications, modals, and add UI elements</li>
            <li><strong>events</strong> - Listen to and emit system events</li>
            <li><strong>settings</strong> - Store and retrieve plugin settings</li>
          </ul>
          
          <h4>Best Practices</h4>
          <ul>
            <li>Always validate user input</li>
            <li>Handle errors gracefully</li>
            <li>Request only necessary permissions</li>
            <li>Follow semantic versioning</li>
            <li>Provide clear documentation</li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default PluginDevelopmentTools;
